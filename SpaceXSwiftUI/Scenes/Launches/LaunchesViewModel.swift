//
//  LaunchesViewModel.swift
//  SpaceXSwiftUI
//
//  Created by Martin Lukacs on 16/10/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates
//

import Foundation
import Combine

protocol FilterType {}

enum Filters: String, CaseIterable, FilterType {
    case all = "All"
    case first = "First"
    case last = "Last"
    case failed = "Failed"
    case upcoming = "Upcoming"
}

final class LaunchesViewModel: ObservableObject {
    
    @Published private(set) var launches: [Launch] = []
    @Published var isLoading = false
    @Published var query = ""
    @Published var filter: Filters = .all
    
    var router: RouteToDetailLaunchContract
    private let launchesRepository: LaunchesRepositoryContract
    private var cancellables = Set<AnyCancellable>()
    
    init(launchesRepository: LaunchesRepositoryContract, router: RouteToDetailLaunchContract) {
        self.router = router
        self.launchesRepository = launchesRepository
        setUp()
    }
    
    func cleanQuery() {
        query = ""
    }
}

private extension LaunchesViewModel {
    func setUp() {
        launchesRepository.isLoadingContent
            .receive(on: DispatchQueue.main)
            .assignNoRetain(to: \.isLoading, on: self)
            .store(in: &cancellables)
        
        filterLaunchesPublisher
            .receive(on: DispatchQueue.main)
            .assignNoRetain(to: \.launches, on: self)
            .store(in: &cancellables)
    }
    
    var filterLaunchesPublisher: AnyPublisher<[Launch], Never> {
        Publishers.CombineLatest3(launchesRepository.launches, $query, $filter)
            .debounce(for: 0.1, scheduler: RunLoop.main)
            .map { [weak self] allLaunches, query, filter in
                guard let self = self, (!query.isEmpty || filter != .all) else { return allLaunches }
                
                let filterData = self.filterLaunches(launches: self.launchesRepository.launches.value,
                                                          query: query, filter: filter)
                return filterData
        }
        .eraseToAnyPublisher()
    }
    
    func filterLaunches(launches: [Launch], query: String, filter: Filters) -> [Launch] {
        if query.isEmpty && filter == .all {
            return launches
        } else if query.isEmpty && filter != .all {
            return addFilterToLaunches(launches: launches, filter: filter)
        } else {
            let filteredLaunches = launches.filter { $0.name.contains(query) }
            return addFilterToLaunches(launches: filteredLaunches, filter: filter)
        }
    }
    
    func addFilterToLaunches(launches: [Launch], filter: Filters) -> [Launch] {
        switch filter {
        case .first:
            guard let first = launches.first else {
                return []
            }
            return [first]
        case .last:
            guard let last = launches.last else {
                return []
            }
            return [last]
        case .failed:
            return launches.filter { $0.success == true }
        case .upcoming:
            return launches.filter { $0.upcoming }
        default:
            return launches
        }
    }
}
