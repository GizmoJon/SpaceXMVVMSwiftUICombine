//
//  LaunchesUIView.swift
//  SpaceXSwiftUI
//
//  Created by Martin Lukacs on 16/10/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the MVVM Xcode Templates
//

import SwiftUI

struct LaunchesView: View {
    @ObservedObject private var viewModel: LaunchesViewModel
    private let gridDisplay = [
        GridItem(.flexible()),
        GridItem(.flexible()),
        GridItem(.flexible())
    ]
    
    init(with viewModel: LaunchesViewModel) {
        self.viewModel = viewModel
    }
    
    init() {
        self.init(with: DependencyInjector.shared.viewModels.launchesViewModel)
    }
    
    var body: some View {
        contentView
    }
}

// MARK: Main container view
private extension LaunchesView {
    var contentView : some View {
        NavigationView {
            ScrollView {
                VStack {
                    searchFilterViewContent.padding()
                    scrollViewContent
                }
            }
            .navigationBarTitle(Text("Launches"))
        }.navigationViewStyle(StackNavigationViewStyle())
    }
}

// MARK: Main container view
private extension LaunchesView {
    var scrollViewContent: some View {
        Group {
            if viewModel.isLoading {
                ProgressView()
            } else {
                LazyVGrid(columns: gridDisplay) {
                    ForEach(viewModel.launches, id: \.flightNumber) { launch in
                        NavigationLink(destination: LazyView(viewModel.router.routeToDetailLaunch(for: launch))) {
                            LaunchUINavigationButton(launch: launch)
                        }
                    }
                }
            }
        }
    }
}

// MARK: Main container view
private extension LaunchesView {
    var searchFilterViewContent: some View {
        VStack {
            searchBar
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 25) {
                    
                    // were going to create swipe menu by iteration...
                    
                    ForEach(Filters.allCases, id: \.self) { filter in
                        Button(action: {
                           viewModel.filter = filter
                        }) {
                            Text(filter.rawValue)
                                .foregroundColor(viewModel.filter == filter ? Color.blue : Color.black.opacity(0.6))
                                .fontWeight(.bold)
                        }
                    }
                }
                .padding(.horizontal)
            }.padding(.bottom)
        }
    }
}

// MARK: Main container view
private extension LaunchesView {
    var searchBar: some View {
        HStack {
            HStack {
                Image(systemName: "magnifyingglass")
                TextField("Filter by name", text: self.$viewModel.query)
                    .foregroundColor(.black)
            }
            .padding()
            .overlay(
                RoundedRectangle(cornerRadius: 10)
                    .stroke(Color.gray, lineWidth: 1)
            )
            
            if !viewModel.query.isEmpty {
                Button(action: {
                    self.viewModel.cleanQuery()
                }) {
                    Text("Cancel")
                        .foregroundColor(Color.black)
                }
                .foregroundColor(.black)
            }
        }
    }
}

struct LaunchesView_Previews: PreviewProvider {
    static var previews: some View {
        LaunchesView(with: DependencyInjector.shared.viewModels.launchesViewModel)
    }
}
